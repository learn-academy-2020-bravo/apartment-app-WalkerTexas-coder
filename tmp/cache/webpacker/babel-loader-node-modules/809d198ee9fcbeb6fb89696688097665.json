{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/learnacademy/Desktop/apartment-app-WalkerTexas-coder/app/javascript/components/ApartmentList.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle, Button, ListGroup, Row, Col } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nvar ApartmentList = function ApartmentList() {\n  //Create an empty array to hold all the apartments\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      allApartments = _useState2[0],\n      setAllApartments = _useState2[1]; //useEffect hook lets us GET all apartments from the database when the component loads\n  //the empty array after the comma means that it will get triggered automatically only once\n\n\n  useEffect(function () {\n    grabApartments();\n  }, []);\n\n  function grabApartments() {\n    return _grabApartments.apply(this, arguments);\n  }\n\n  function _grabApartments() {\n    _grabApartments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"http://localhost:3000/apartments\");\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context.sent;\n\n              //all good?\n              if (response.status === 200) {\n                //check the console to make sure we have all the apartments\n                console.log(\"data\", data); //populate the newApartments state array with data\n\n                setAllApartments(data);\n              }\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n    return _grabApartments.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    id: \"mainPageCards\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, allApartments.map(function (apartment, index) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      md: \"3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      id: \"cardstyle\",\n      onClick: function onClick() {\n        window.location.replace(\"/show/\".concat(apartment.id));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CardImg, {\n      top: true,\n      width: \"100%\",\n      src: apartment.images,\n      alt: \"This is the alt text\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(CardBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(CardTitle, {\n      id: \"namestyle\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 23\n      }\n    }, apartment.name), /*#__PURE__*/React.createElement(CardSubtitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }\n    }, apartment.age, \" Years Old\"), /*#__PURE__*/React.createElement(CardText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }\n    }, \"Enjoys: \", apartment.enjoys))))));\n  })));\n};\n\nexport default ApartmentList;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/apartment-app-WalkerTexas-coder/app/javascript/components/ApartmentList.js"],"names":["React","useState","useEffect","Card","CardImg","CardText","CardBody","CardTitle","CardSubtitle","Button","ListGroup","Row","Col","Link","ApartmentList","allApartments","setAllApartments","grabApartments","fetch","response","json","data","status","console","log","map","apartment","index","window","location","replace","id","images","name","age","enjoys"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle, Button, ListGroup, Row, Col\n  } from 'reactstrap';\nimport { Link } from 'react-router-dom'\n\n\nconst ApartmentList = () => {\n    //Create an empty array to hold all the apartments\n  const [allApartments, setAllApartments] = useState([])\n\n    //useEffect hook lets us GET all apartments from the database when the component loads\n    //the empty array after the comma means that it will get triggered automatically only once\n  useEffect(() =>{ grabApartments()},[])\n\n  async function grabApartments () {\n    try {\n        //GET data from the backend\n      let response = await fetch(\"http://localhost:3000/apartments\")\n\n      let data = await response.json();\n        //all good?\n      if(response.status === 200) {\n        //check the console to make sure we have all the apartments\n        console.log(\"data\", data)\n        //populate the newApartments state array with data\n        setAllApartments(data)\n      }\n    } catch (err) {\n        console.log(err)\n    }\n  }\n    return(\n\n          <>\n          <Row id=\"mainPageCards\">\n          { allApartments.map((apartment, index) => {\n            return(\n            <>\n              <Col xs=\"6\" sm=\"4\" md=\"3\">\n              <Card id=\"cardstyle\" onClick= { () => {window.location.replace(`/show/${apartment.id}`)}} >\n\n                  <CardImg top width=\"100%\" src={apartment.images} alt=\"This is the alt text\" />\n                  <CardBody >\n                      <ListGroup key={ index }>\n                      <CardTitle id=\"namestyle\">{ apartment.name }</CardTitle>\n                      <CardSubtitle>{ apartment.age } Years Old</CardSubtitle>\n                      <CardText>Enjoys: { apartment.enjoys }</CardText>\n                      </ListGroup>\n                  </CardBody>\n              </Card>\n              </Col>\n              </>\n            )})}\n            </Row>\n          </>\n    )\n  }\n\nexport default ApartmentList\n"]},"metadata":{},"sourceType":"module"}